// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/sumup/sii-certification/internal/entities"

	time "time"
)

// IDomain is an autogenerated mock type for the IDomain type
type IDomain struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx
func (_m *IDomain) Auth(ctx context.Context) (string, string, string, string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(context.Context) string); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 string
	if rf, ok := ret.Get(3).(func(context.Context) string); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Get(3).(string)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context) error); ok {
		r4 = rf(ctx)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Generate provides a mock function with given fields: ctx, startDate, endDate
func (_m *IDomain) Generate(ctx context.Context, startDate time.Time, endDate time.Time) ([]entities.Batch, error) {
	ret := _m.Called(ctx, startDate, endDate)

	var r0 []entities.Batch
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []entities.Batch); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatchesByDay provides a mock function with given fields: ctx, day, page, pageSize
func (_m *IDomain) GetBatchesByDay(ctx context.Context, day string, page int, pageSize int) ([]entities.Batch, int64, error) {
	ret := _m.Called(ctx, day, page, pageSize)

	var r0 []entities.Batch
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []entities.Batch); ok {
		r0 = rf(ctx, day, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Batch)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, day, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, day, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Send provides a mock function with given fields: ctx
func (_m *IDomain) Send(ctx context.Context) ([]entities.Batch, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Batch
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Batch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIDomain interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDomain creates a new instance of IDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDomain(t mockConstructorTestingTNewIDomain) *IDomain {
	mock := &IDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
